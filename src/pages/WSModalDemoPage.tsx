import { useState } from 'react';
import {
  Container,
  Typography,
  Grid,
  Paper,
  Box,
  Divider,
  Stack,
} from '@mui/material';
import {
  Warning as WarningIcon,
  Delete as DeleteIcon,
  Save as SaveIcon,
  Info as InfoIcon,
  Add as AddIcon,
  Settings as SettingsIcon,
} from '@mui/icons-material';
import { WSModal, WSButton, WSInput, WSFormField } from '@/components';

export default function WSModalDemoPage() {
  // Modal states
  const [basicModal, setBasicModal] = useState(false);
  const [confirmModal, setConfirmModal] = useState(false);
  const [formModal, setFormModal] = useState(false);
  const [loadingModal, setLoadingModal] = useState(false);
  const [fullscreenModal, setFullscreenModal] = useState(false);
  const [customModal, setCustomModal] = useState(false);

  // Form state
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    description: '',
  });

  // Simulate async operations
  const simulateAsyncOperation = () => {
    return new Promise<void>((resolve) => {
      setTimeout(resolve, 2000);
    });
  };

  const handleDeleteProduct = async () => {
    await simulateAsyncOperation();
    alert('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a!');
  };

  const handleSaveProduct = async () => {
    await simulateAsyncOperation();
    alert('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c l∆∞u!');
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Typography variant="h3" component="h1" gutterBottom>
        WSModal Component Demo
      </Typography>
      <Typography variant="subtitle1" color="text.secondary" gutterBottom>
        Comprehensive demo of WSModal sizes, variants, animations and features
      </Typography>

      <Grid container spacing={4}>
        {/* === BASIC MODALS === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üé® Modal Sizes & Basic Usage
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Small, Medium, Large, v√† Fullscreen sizes
            </Typography>

            <Stack direction="row" spacing={2} flexWrap="wrap" sx={{ mt: 2 }}>
              <WSButton onClick={() => setBasicModal(true)}>
                Small Modal
              </WSButton>

              <WSButton onClick={() => setFormModal(true)} color="secondary">
                Medium Modal (Form)
              </WSButton>

              <WSButton onClick={() => setCustomModal(true)} color="success">
                Large Modal
              </WSButton>

              <WSButton onClick={() => setFullscreenModal(true)} color="info">
                Fullscreen Modal
              </WSButton>
            </Stack>
          </Paper>
        </Grid>

        {/* === MODAL VARIANTS === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üé≠ Modal Variants
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Default, Confirmation, v√† Form variants v·ªõi styling kh√°c nhau
            </Typography>

            <Stack direction="row" spacing={2} flexWrap="wrap" sx={{ mt: 2 }}>
              <WSButton variant="outlined" onClick={() => setBasicModal(true)}>
                Default Modal
              </WSButton>

              <WSButton
                variant="outlined"
                color="warning"
                onClick={() => setConfirmModal(true)}
                startIcon={<WarningIcon />}
              >
                Confirmation Modal
              </WSButton>

              <WSButton
                variant="outlined"
                color="info"
                onClick={() => setFormModal(true)}
                startIcon={<SaveIcon />}
              >
                Form Modal
              </WSButton>
            </Stack>
          </Paper>
        </Grid>

        {/* === LOADING STATES === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üîÑ Loading States & Async Actions
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Modal v·ªõi loading overlay v√† async button actions
            </Typography>

            <Stack direction="row" spacing={2} flexWrap="wrap" sx={{ mt: 2 }}>
              <WSButton
                onClick={() => setLoadingModal(true)}
                startIcon={<SettingsIcon />}
              >
                Loading Modal
              </WSButton>

              <WSButton
                color="error"
                onClick={() => setConfirmModal(true)}
                startIcon={<DeleteIcon />}
              >
                Async Delete Action
              </WSButton>
            </Stack>
          </Paper>
        </Grid>

        {/* === ADVANCED FEATURES === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              ‚öôÔ∏è Advanced Features
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Custom content, styling, v√† complex interactions
            </Typography>

            <Box sx={{ mt: 2 }}>
              <Typography variant="h6" gutterBottom>
                Features Showcase:
              </Typography>
              <ul>
                <li>‚ú® Smooth animations v·ªõi backdrop blur</li>
                <li>üì± Responsive design (desktop ‚Üí mobile bottom sheet)</li>
                <li>üé® Theme integration (dark/light mode)</li>
                <li>‚ôø Accessibility support (ARIA, keyboard navigation)</li>
                <li>üîÑ Async action handling v·ªõi loading states</li>
                <li>üé≠ Multiple variants v·ªõi visual indicators</li>
                <li>üìè Flexible sizing system</li>
                <li>üîí Body scroll lock khi modal m·ªü</li>
              </ul>
            </Box>
          </Paper>
        </Grid>
      </Grid>

      {/* === MODAL IMPLEMENTATIONS === */}

      {/* BASIC MODAL - Small Size */}
      <WSModal
        open={basicModal}
        onClose={() => setBasicModal(false)}
        size="small"
        title="Th√¥ng b√°o"
        content="ƒê√¢y l√† m·ªôt modal c∆° b·∫£n v·ªõi k√≠ch th∆∞·ªõc nh·ªè. Animation m∆∞·ª£t m√† v√† responsive."
        actions={[
          {
            label: 'ƒê√≥ng',
            onClick: () => setBasicModal(false),
            variant: 'outlined',
          },
          {
            label: 'OK',
            onClick: () => setBasicModal(false),
            color: 'primary',
          },
        ]}
      />

      {/* CONFIRMATION MODAL - Warning Variant */}
      <WSModal
        open={confirmModal}
        onClose={() => setConfirmModal(false)}
        variant="confirmation"
        title="X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m"
        subtitle="H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c"
        content="S·∫£n ph·∫©m s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn kh·ªèi h·ªá th·ªëng. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?"
        actions={[
          {
            label: 'H·ªßy',
            onClick: () => setConfirmModal(false),
            variant: 'outlined',
          },
          {
            label: 'X√≥a s·∫£n ph·∫©m',
            onClick: handleDeleteProduct,
            color: 'error',
            startIcon: <DeleteIcon />,
            autoClose: true,
          },
        ]}
      />

      {/* FORM MODAL - Medium Size */}
      <WSModal
        open={formModal}
        onClose={() => setFormModal(false)}
        variant="form"
        size="medium"
        title="Th√™m s·∫£n ph·∫©m m·ªõi"
        subtitle="ƒêi·ªÅn th√¥ng tin s·∫£n ph·∫©m"
        actions={[
          {
            label: 'H·ªßy',
            onClick: () => setFormModal(false),
            variant: 'text',
          },
          {
            label: 'L∆∞u s·∫£n ph·∫©m',
            onClick: handleSaveProduct,
            color: 'success',
            startIcon: <SaveIcon />,
            autoClose: true,
          },
        ]}
      >
        <Stack spacing={3}>
          <WSFormField label="T√™n s·∫£n ph·∫©m" required>
            <WSInput
              placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m..."
              value={formData.name}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, name: e.target.value }))
              }
            />
          </WSFormField>

          <WSFormField label="Email li√™n h·ªá">
            <WSInput
              type="email"
              placeholder="example@email.com"
              value={formData.email}
              onChange={(e) =>
                setFormData((prev) => ({ ...prev, email: e.target.value }))
              }
            />
          </WSFormField>

          <WSFormField label="M√¥ t·∫£ s·∫£n ph·∫©m">
            <WSInput
              multiline
              rows={4}
              placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·∫£n ph·∫©m..."
              maxCharacters={500}
              showCharacterCount
              value={formData.description}
              onChange={(e) =>
                setFormData((prev) => ({
                  ...prev,
                  description: e.target.value,
                }))
              }
            />
          </WSFormField>
        </Stack>
      </WSModal>

      {/* LOADING MODAL */}
      <WSModal
        open={loadingModal}
        onClose={() => setLoadingModal(false)}
        title="ƒêang x·ª≠ l√Ω"
        content="Vui l√≤ng ƒë·ª£i trong khi h·ªá th·ªëng x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n..."
        loading
        closable={false}
        showCloseButton={false}
      />

      {/* FULLSCREEN MODAL */}
      <WSModal
        open={fullscreenModal}
        onClose={() => setFullscreenModal(false)}
        size="fullscreen"
        title="Fullscreen Modal"
        subtitle="Modal to√†n m√†n h√¨nh v·ªõi nhi·ªÅu n·ªôi dung"
        actions={[
          {
            label: 'ƒê√≥ng',
            onClick: () => setFullscreenModal(false),
            variant: 'outlined',
          },
        ]}
      >
        <Box sx={{ py: 4 }}>
          <Typography variant="h6" gutterBottom>
            N·ªôi dung fullscreen
          </Typography>
          <Typography variant="body1" paragraph>
            Modal fullscreen ph√π h·ª£p cho:
          </Typography>
          <ul>
            <li>üìä Dashboards v√† analytics</li>
            <li>üìù Form ph·ª©c t·∫°p v·ªõi nhi·ªÅu sections</li>
            <li>üì± Mobile-first experiences</li>
            <li>üñºÔ∏è Media galleries</li>
            <li>‚öôÔ∏è Settings v√† configuration panels</li>
          </ul>

          <Divider sx={{ my: 3 }} />

          <Typography variant="h6" gutterBottom>
            Demo Content
          </Typography>
          <Grid container spacing={2}>
            {[1, 2, 3, 4, 5, 6].map((item) => (
              <Grid size={{ xs: 12, sm: 6, md: 4 }} key={item}>
                <Paper sx={{ p: 2, textAlign: 'center' }}>
                  <Typography variant="h6">Item {item}</Typography>
                  <Typography variant="body2" color="text.secondary">
                    Demo content item
                  </Typography>
                </Paper>
              </Grid>
            ))}
          </Grid>
        </Box>
      </WSModal>

      {/* CUSTOM CONTENT MODAL - Large Size */}
      <WSModal
        open={customModal}
        onClose={() => setCustomModal(false)}
        size="large"
        title="Large Modal v·ªõi Custom Content"
        subtitle="Showcase nhi·ªÅu components v√† layouts"
        actions={[
          {
            label: 'Export',
            onClick: () => alert('Export functionality'),
            variant: 'outlined',
            startIcon: <SaveIcon />,
          },
          {
            label: 'Th√™m m·ªõi',
            onClick: () => alert('Add new functionality'),
            color: 'success',
            startIcon: <AddIcon />,
          },
          {
            label: 'ƒê√≥ng',
            onClick: () => setCustomModal(false),
            variant: 'text',
          },
        ]}
      >
        <Stack spacing={3}>
          <Box>
            <Typography variant="h6" gutterBottom>
              üìä Demo Statistics
            </Typography>
            <Grid container spacing={2}>
              <Grid size={{ xs: 6, md: 3 }}>
                <Paper
                  sx={{
                    p: 2,
                    textAlign: 'center',
                    bgcolor: 'primary.main',
                    color: 'primary.contrastText',
                  }}
                >
                  <Typography variant="h4">1,234</Typography>
                  <Typography variant="body2">Total Products</Typography>
                </Paper>
              </Grid>
              <Grid size={{ xs: 6, md: 3 }}>
                <Paper
                  sx={{
                    p: 2,
                    textAlign: 'center',
                    bgcolor: 'success.main',
                    color: 'success.contrastText',
                  }}
                >
                  <Typography variant="h4">567</Typography>
                  <Typography variant="body2">Active Users</Typography>
                </Paper>
              </Grid>
              <Grid size={{ xs: 6, md: 3 }}>
                <Paper
                  sx={{
                    p: 2,
                    textAlign: 'center',
                    bgcolor: 'warning.main',
                    color: 'warning.contrastText',
                  }}
                >
                  <Typography variant="h4">89</Typography>
                  <Typography variant="body2">Pending Orders</Typography>
                </Paper>
              </Grid>
              <Grid size={{ xs: 6, md: 3 }}>
                <Paper
                  sx={{
                    p: 2,
                    textAlign: 'center',
                    bgcolor: 'error.main',
                    color: 'error.contrastText',
                  }}
                >
                  <Typography variant="h4">12</Typography>
                  <Typography variant="body2">Issues</Typography>
                </Paper>
              </Grid>
            </Grid>
          </Box>

          <Divider />

          <Box>
            <Typography variant="h6" gutterBottom>
              üîß Quick Actions
            </Typography>
            <Stack direction="row" spacing={1} flexWrap="wrap">
              <WSButton size="small" startIcon={<AddIcon />}>
                Add Product
              </WSButton>
              <WSButton size="small" color="secondary" startIcon={<InfoIcon />}>
                View Reports
              </WSButton>
              <WSButton
                size="small"
                color="warning"
                startIcon={<WarningIcon />}
              >
                Check Issues
              </WSButton>
              <WSButton size="small" color="error" startIcon={<DeleteIcon />}>
                Bulk Delete
              </WSButton>
            </Stack>
          </Box>

          <Divider />

          <Box>
            <Typography variant="h6" gutterBottom>
              üìù Quick Form
            </Typography>
            <Grid container spacing={2}>
              <Grid size={{ xs: 12, md: 6 }}>
                <WSFormField label="Search">
                  <WSInput placeholder="Search products..." />
                </WSFormField>
              </Grid>
              <Grid size={{ xs: 12, md: 6 }}>
                <WSFormField label="Category">
                  <WSInput placeholder="Select category..." />
                </WSFormField>
              </Grid>
            </Grid>
          </Box>
        </Stack>
      </WSModal>

      <Divider sx={{ my: 4 }} />

      {/* === USAGE EXAMPLES === */}
      <Paper sx={{ p: 3 }}>
        <Typography variant="h5" gutterBottom>
          üí° Usage Examples
        </Typography>

        <Box sx={{ mt: 2 }}>
          <Typography variant="h6" gutterBottom>
            Basic Usage:
          </Typography>
          <Box
            component="pre"
            sx={{
              backgroundColor: 'grey.100',
              p: 2,
              borderRadius: 1,
              overflow: 'auto',
              fontSize: '0.875rem',
            }}
          >
            {`import { WSModal } from '@/components';

// Basic modal
<WSModal
  open={isOpen}
  onClose={() => setIsOpen(false)}
  title="Th√¥ng b√°o"
  content="N·ªôi dung modal"
/>

// Confirmation modal
<WSModal
  open={showConfirm}
  onClose={() => setShowConfirm(false)}
  variant="confirmation"
  title="X√°c nh·∫≠n x√≥a"
  content="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a?"
  actions={[
    {
      label: "H·ªßy",
      onClick: () => setShowConfirm(false),
      variant: "outlined"
    },
    {
      label: "X√≥a",
      onClick: async () => await deleteItem(),
      color: "error",
      autoClose: true
    }
  ]}
/>

// Form modal v·ªõi custom content
<WSModal
  open={showForm}
  onClose={() => setShowForm(false)}
  variant="form"
  size="large"
  title="Th√™m s·∫£n ph·∫©m"
>
  <ProductForm onSubmit={handleSubmit} />
</WSModal>`}
          </Box>
        </Box>
      </Paper>
    </Container>
  );
}
