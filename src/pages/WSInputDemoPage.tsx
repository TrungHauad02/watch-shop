import { useState } from 'react';
import {
  Container,
  Typography,
  Grid,
  Paper,
  Box,
  Divider,
  Stack,
} from '@mui/material';
import {
  Search as SearchIcon,
  Email as EmailIcon,
  Lock as LockIcon,
  Person as PersonIcon,
  Phone as PhoneIcon,
  Description as DescriptionIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
} from '@mui/icons-material';
import WSInput from '@/components/WSInput';

export default function WSInputDemoPage() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    phone: '',
    description: '',
    search: '',
  });

  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const handleInputChange =
    (field: string) =>
    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      setFormData((prev) => ({
        ...prev,
        [field]: event.target.value,
      }));

      // Clear error when user starts typing
      if (errors[field]) {
        setErrors((prev) => ({
          ...prev,
          [field]: '',
        }));
      }
    };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }

    if (!formData.password) {
      newErrors.password = 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Typography variant="h3" component="h1" gutterBottom>
        WSInput Component Demo
      </Typography>
      <Typography variant="subtitle1" color="text.secondary" gutterBottom>
        Comprehensive demo of WSInput variants, sizes, colors and features
      </Typography>

      <Grid container spacing={4}>
        {/* === VARIANTS DEMO === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üé® Input Variants
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Outlined v√† Filled variants
            </Typography>

            <Grid container spacing={2} sx={{ mt: 1 }}>
              <Grid size={{ xs: 12, md: 6 }}>
                <WSInput
                  variant="outlined"
                  label="Outlined Input"
                  placeholder="Nh·∫≠p text..."
                  startIcon={<PersonIcon />}
                />
              </Grid>
              <Grid size={{ xs: 12, md: 6 }}>
                <WSInput
                  variant="filled"
                  label="Filled Input"
                  placeholder="Nh·∫≠p text..."
                  startIcon={<PersonIcon />}
                />
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* === SIZES DEMO === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üìè Input Sizes
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Small, Medium, v√† Large sizes
            </Typography>

            <Stack spacing={2} sx={{ mt: 2 }}>
              <WSInput
                size="small"
                label="Small Input"
                placeholder="K√≠ch th∆∞·ªõc nh·ªè"
                startIcon={<SearchIcon />}
              />
              <WSInput
                size="medium"
                label="Medium Input"
                placeholder="K√≠ch th∆∞·ªõc v·ª´a"
                startIcon={<SearchIcon />}
              />
              <WSInput
                size="large"
                label="Large Input"
                placeholder="K√≠ch th∆∞·ªõc l·ªõn"
                startIcon={<SearchIcon />}
              />
            </Stack>
          </Paper>
        </Grid>

        {/* === COLORS DEMO === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üåà Color Variants
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              T·∫•t c·∫£ m√†u s·∫Øc available
            </Typography>

            <Grid container spacing={2} sx={{ mt: 1 }}>
              <Grid size={{ xs: 12, sm: 6, md: 4 }}>
                <WSInput
                  color="primary"
                  label="Primary"
                  placeholder="M√†u ch√≠nh"
                />
              </Grid>
              <Grid size={{ xs: 12, sm: 6, md: 4 }}>
                <WSInput
                  color="secondary"
                  label="Secondary"
                  placeholder="M√†u ph·ª•"
                />
              </Grid>
              <Grid size={{ xs: 12, sm: 6, md: 4 }}>
                <WSInput
                  color="success"
                  label="Success"
                  placeholder="M√†u th√†nh c√¥ng"
                />
              </Grid>
              <Grid size={{ xs: 12, sm: 6, md: 4 }}>
                <WSInput
                  color="warning"
                  label="Warning"
                  placeholder="M√†u c·∫£nh b√°o"
                />
              </Grid>
              <Grid size={{ xs: 12, sm: 6, md: 4 }}>
                <WSInput color="error" label="Error" placeholder="M√†u l·ªói" />
              </Grid>
              <Grid size={{ xs: 12, sm: 6, md: 4 }}>
                <WSInput
                  color="info"
                  label="Info"
                  placeholder="M√†u th√¥ng tin"
                />
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* === INPUT TYPES DEMO === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              ‚å®Ô∏è Input Types
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              C√°c lo·∫°i input kh√°c nhau v·ªõi icons ph√π h·ª£p
            </Typography>

            <Grid container spacing={2} sx={{ mt: 1 }}>
              <Grid size={{ xs: 12, md: 6 }}>
                <WSInput
                  type="text"
                  label="H·ªç v√† t√™n"
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                  startIcon={<PersonIcon />}
                  value={formData.name}
                  onChange={handleInputChange('name')}
                  error={!!errors.name}
                  helperText={errors.name}
                />
              </Grid>

              <Grid size={{ xs: 12, md: 6 }}>
                <WSInput
                  type="email"
                  label="Email"
                  placeholder="example@email.com"
                  startIcon={<EmailIcon />}
                  value={formData.email}
                  onChange={handleInputChange('email')}
                  error={!!errors.email}
                  helperText={errors.email}
                />
              </Grid>

              <Grid size={{ xs: 12, md: 6 }}>
                <WSInput
                  type={showPassword ? 'text' : 'password'}
                  label="M·∫≠t kh·∫©u"
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  startIcon={<LockIcon />}
                  endIcon={
                    <Box
                      sx={{ cursor: 'pointer' }}
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? (
                        <VisibilityOffIcon />
                      ) : (
                        <VisibilityIcon />
                      )}
                    </Box>
                  }
                  value={formData.password}
                  onChange={handleInputChange('password')}
                  error={!!errors.password}
                  helperText={errors.password}
                />
              </Grid>

              <Grid size={{ xs: 12, md: 6 }}>
                <WSInput
                  type="tel"
                  label="S·ªë ƒëi·ªán tho·∫°i"
                  placeholder="0123456789"
                  startIcon={<PhoneIcon />}
                  value={formData.phone}
                  onChange={handleInputChange('phone')}
                />
              </Grid>

              <Grid size={{ xs: 12, md: 6 }}>
                <WSInput
                  type="search"
                  label="T√¨m ki·∫øm"
                  placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
                  startIcon={<SearchIcon />}
                  value={formData.search}
                  onChange={handleInputChange('search')}
                />
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* === MULTILINE & CHARACTER COUNT === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üìÑ Multiline & Character Count
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Textarea v·ªõi gi·ªõi h·∫°n k√Ω t·ª± v√† ƒë·∫øm k√Ω t·ª±
            </Typography>

            <Grid container spacing={2} sx={{ mt: 1 }}>
              <Grid size={{ xs: 12, md: 6 }}>
                <WSInput
                  label="M√¥ t·∫£ ng·∫Øn"
                  multiline
                  rows={3}
                  maxCharacters={100}
                  showCharacterCount
                  placeholder="Nh·∫≠p m√¥ t·∫£ ng·∫Øn..."
                  startIcon={<DescriptionIcon />}
                  helperText="M√¥ t·∫£ ng·∫Øn v·ªÅ s·∫£n ph·∫©m"
                />
              </Grid>

              <Grid size={{ xs: 12, md: 6 }}>
                <WSInput
                  label="M√¥ t·∫£ chi ti·∫øt"
                  multiline
                  rows={4}
                  maxCharacters={500}
                  showCharacterCount
                  placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt..."
                  value={formData.description}
                  onChange={handleInputChange('description')}
                  helperText="M√¥ t·∫£ chi ti·∫øt v·ªÅ t√≠nh nƒÉng v√† ƒë·∫∑c ƒëi·ªÉm"
                />
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* === VALIDATION STATES === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              ‚úÖ Validation States
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Error, Success, v√† c√°c tr·∫°ng th√°i validation
            </Typography>

            <Grid container spacing={2} sx={{ mt: 1 }}>
              <Grid size={{ xs: 12, md: 4 }}>
                <WSInput
                  label="Input b√¨nh th∆∞·ªùng"
                  placeholder="Kh√¥ng c√≥ validation"
                  helperText="Tr·∫°ng th√°i b√¨nh th∆∞·ªùng"
                />
              </Grid>

              <Grid size={{ xs: 12, md: 4 }}>
                <WSInput
                  label="Input l·ªói"
                  placeholder="C√≥ l·ªói"
                  error
                  helperText="Email kh√¥ng h·ª£p l·ªá"
                  startIcon={<EmailIcon />}
                />
              </Grid>

              <Grid size={{ xs: 12, md: 4 }}>
                <WSInput
                  label="Input th√†nh c√¥ng"
                  placeholder="Th√†nh c√¥ng"
                  success
                  helperText="Email h·ª£p l·ªá"
                  startIcon={<EmailIcon />}
                />
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* === DISABLED & READONLY === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üö´ Disabled & ReadOnly States
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              C√°c tr·∫°ng th√°i disabled v√† readonly
            </Typography>

            <Grid container spacing={2} sx={{ mt: 1 }}>
              <Grid size={{ xs: 12, md: 4 }}>
                <WSInput
                  label="Input disabled"
                  placeholder="Kh√¥ng th·ªÉ nh·∫≠p"
                  disabled
                  helperText="Input b·ªã v√¥ hi·ªáu h√≥a"
                />
              </Grid>

              <Grid size={{ xs: 12, md: 4 }}>
                <WSInput
                  label="Input readonly"
                  value="Gi√° tr·ªã ch·ªâ ƒë·ªçc"
                  readOnly
                  helperText="Ch·ªâ c√≥ th·ªÉ ƒë·ªçc, kh√¥ng th·ªÉ ch·ªânh s·ª≠a"
                />
              </Grid>

              <Grid size={{ xs: 12, md: 4 }}>
                <WSInput
                  label="Input required"
                  placeholder="B·∫Øt bu·ªôc nh·∫≠p"
                  required
                  helperText="Tr∆∞·ªùng b·∫Øt bu·ªôc"
                />
              </Grid>
            </Grid>
          </Paper>
        </Grid>

        {/* === FORM DEMO === */}
        <Grid size={{ xs: 12 }}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom>
              üìã Form Integration Demo
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              Form ho√†n ch·ªânh v·ªõi validation
            </Typography>

            <Box
              component="form"
              onSubmit={(e) => {
                e.preventDefault();
                if (validateForm()) {
                  alert(
                    'Form h·ª£p l·ªá! D·ªØ li·ªáu: ' + JSON.stringify(formData, null, 2)
                  );
                }
              }}
              sx={{ mt: 2 }}
            >
              <Grid container spacing={2}>
                <Grid size={{ xs: 12, md: 6 }}>
                  <WSInput
                    label="H·ªç v√† t√™n *"
                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    startIcon={<PersonIcon />}
                    value={formData.name}
                    onChange={handleInputChange('name')}
                    error={!!errors.name}
                    helperText={errors.name}
                    required
                  />
                </Grid>

                <Grid size={{ xs: 12, md: 6 }}>
                  <WSInput
                    label="Email *"
                    type="email"
                    placeholder="example@email.com"
                    startIcon={<EmailIcon />}
                    value={formData.email}
                    onChange={handleInputChange('email')}
                    error={!!errors.email}
                    helperText={errors.email}
                    required
                  />
                </Grid>

                <Grid size={{ xs: 12 }}>
                  <WSInput
                    label="Ghi ch√∫"
                    multiline
                    rows={3}
                    maxCharacters={200}
                    showCharacterCount
                    placeholder="Nh·∫≠p ghi ch√∫ (t√πy ch·ªçn)..."
                    value={formData.description}
                    onChange={handleInputChange('description')}
                    helperText="Ghi ch√∫ th√™m v·ªÅ ƒë∆°n h√†ng"
                  />
                </Grid>
              </Grid>

              <Box sx={{ mt: 3, display: 'flex', gap: 2 }}>
                <button
                  type="submit"
                  style={{
                    padding: '10px 20px',
                    backgroundColor: '#101820',
                    color: '#FEE715',
                    border: 'none',
                    borderRadius: '8px',
                    cursor: 'pointer',
                  }}
                >
                  Validate Form
                </button>

                <button
                  type="button"
                  onClick={() => {
                    setFormData({
                      name: '',
                      email: '',
                      password: '',
                      phone: '',
                      description: '',
                      search: '',
                    });
                    setErrors({});
                  }}
                  style={{
                    padding: '10px 20px',
                    backgroundColor: 'transparent',
                    color: '#101820',
                    border: '2px solid #101820',
                    borderRadius: '8px',
                    cursor: 'pointer',
                  }}
                >
                  Reset Form
                </button>
              </Box>
            </Box>
          </Paper>
        </Grid>
      </Grid>

      <Divider sx={{ my: 4 }} />

      {/* === USAGE EXAMPLES === */}
      <Paper sx={{ p: 3 }}>
        <Typography variant="h5" gutterBottom>
          üí° Usage Examples
        </Typography>

        <Box sx={{ mt: 2 }}>
          <Typography variant="h6" gutterBottom>
            Basic Usage:
          </Typography>
          <Box
            component="pre"
            sx={{
              backgroundColor: 'grey.100',
              p: 2,
              borderRadius: 1,
              overflow: 'auto',
              fontSize: '0.875rem',
            }}
          >
            {`import { WSInput } from '@/components';

// Basic input
<WSInput label="T√™n s·∫£n ph·∫©m" />

// With validation
<WSInput
  label="Email"
  type="email"
  error={hasError}
  helperText="Email kh√¥ng h·ª£p l·ªá"
  startIcon={<EmailIcon />}
/>

// Multiline with character count
<WSInput
  label="M√¥ t·∫£"
  multiline
  rows={4}
  maxCharacters={500}
  showCharacterCount
  helperText="M√¥ t·∫£ chi ti·∫øt s·∫£n ph·∫©m"
/>

// With success state
<WSInput
  label="M·∫≠t kh·∫©u"
  type="password"
  success={isPasswordValid}
  helperText="M·∫≠t kh·∫©u h·ª£p l·ªá"
/>`}
          </Box>
        </Box>
      </Paper>
    </Container>
  );
}
