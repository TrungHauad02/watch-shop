/* eslint-disable @typescript-eslint/no-explicit-any */
import { styled } from '@mui/material/styles';
import { TextField, FormHelperText, InputAdornment } from '@mui/material';
import { WSInputVariant, WSInputColor, WSInputSize } from './WSInput.types';

// ==============================================
// COLOR CONFIGURATIONS - THEME INTEGRATED
// ==============================================

/**
 * WSInput Color Mapping Guide
 * ===========================
 *
 * CUSTOMIZE: B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a m√†u s·∫Øc input t·∫°i ƒë√¢y
 *
 * C·∫•u tr√∫c m√†u cho input:
 * - focusColor: üéØ M√†u khi focus (border + label)
 * - hoverColor: üé® M√†u khi hover
 * - backgroundColor: üé® M√†u n·ªÅn input
 * - textColor: üìù M√†u ch·ªØ
 */

const getInputColors = (
  theme: any,
  color: WSInputColor,
  hasError: boolean,
  hasSuccess: boolean
) => {
  // Error state always takes priority
  if (hasError) {
    return {
      main: theme.palette.error.main, // üö® ƒê·ªè cho l·ªói
      light: theme.palette.error.light,
      dark: theme.palette.error.dark,
    };
  }

  // Success state when no error
  if (hasSuccess) {
    return {
      main: theme.palette.success.main, // ‚úÖ Xanh cho th√†nh c√¥ng
      light: theme.palette.success.light,
      dark: theme.palette.success.dark,
    };
  }

  // CUSTOMIZE: Mapping m√†u theme cho c√°c tr·∫°ng th√°i b√¨nh th∆∞·ªùng
  const colorMap = {
    primary: {
      main: theme.palette.primary.main, // üéØ Rich Black (#101820)
      light: theme.palette.primary.light, // üéØ Lighter Black
      dark: theme.palette.primary.dark, // üéØ Darker Black
    },
    secondary: {
      main: theme.palette.secondary.main, // üéØ Vivid Yellow (#FEE715)
      light: theme.palette.secondary.light, // üéØ Light Yellow
      dark: theme.palette.secondary.dark, // üéØ Gold
    },
    success: {
      main: theme.palette.success.main, // ‚úÖ Green
      light: theme.palette.success.light,
      dark: theme.palette.success.dark,
    },
    warning: {
      main: theme.palette.warning.main, // ‚ö†Ô∏è Orange
      light: theme.palette.warning.light,
      dark: theme.palette.warning.dark,
    },
    error: {
      main: theme.palette.error.main, // üö® Red
      light: theme.palette.error.light,
      dark: theme.palette.error.dark,
    },
    info: {
      main: theme.palette.info.main, // ‚ÑπÔ∏è Blue
      light: theme.palette.info.light,
      dark: theme.palette.info.dark,
    },
  };

  return colorMap[color];
};

// ==============================================
// SIZE CONFIGURATIONS
// ==============================================

const getSizeConfig = (size: WSInputSize) => {
  // CUSTOMIZE: K√≠ch th∆∞·ªõc input cho t·ª´ng size
  const sizeMap = {
    small: {
      height: '36px', // üìè Chi·ªÅu cao compact
      padding: '8px 12px', // üìê Padding nh·ªè
      fontSize: '0.875rem', // üìù 14px - mobile friendly
      iconSize: '16px', // üéØ Icon nh·ªè
      borderRadius: '6px', // üîÑ Bo g√≥c nh·∫π
    },
    medium: {
      height: '44px', // üìè Chi·ªÅu cao chu·∫©n
      padding: '10px 14px', // üìê Padding c√¢n b·∫±ng
      fontSize: '1rem', // üìù 16px - prevent mobile zoom
      iconSize: '20px', // üéØ Icon v·ª´a
      borderRadius: '8px', // üîÑ Bo g√≥c chu·∫©n
    },
    large: {
      height: '52px', // üìè Chi·ªÅu cao r·ªông r√£i
      padding: '14px 16px', // üìê Padding l·ªõn
      fontSize: '1.125rem', // üìù 18px - d·ªÖ ƒë·ªçc
      iconSize: '24px', // üéØ Icon l·ªõn
      borderRadius: '10px', // üîÑ Bo g√≥c m·ªÅm m·∫°i
    },
  };

  return sizeMap[size];
};

// ==============================================
// STYLED TEXTFIELD COMPONENT - THEME INTEGRATED
// ==============================================

export const StyledWSInput = styled(TextField, {
  shouldForwardProp: (prop) =>
    !['wsVariant', 'wsColor', 'wsSize', 'hasSuccess'].includes(prop as string),
})<{
  wsVariant: WSInputVariant;
  wsColor: WSInputColor;
  wsSize: WSInputSize;
  hasSuccess: boolean;
}>(({ theme, wsVariant, wsColor, wsSize, hasSuccess, error }) => {
  const colors = getInputColors(theme, wsColor, !!error, hasSuccess);
  const sizeConfig = getSizeConfig(wsSize);
  const focusColor = colors.main;

  const filledPadding = () => {
    switch (wsSize) {
      case 'small':
        return '12px 12px';
      case 'medium':
        return '14px 14px';
      case 'large':
        return '16px 16px';
      default:
        return sizeConfig.padding;
    }
  };

  return {
    // === BASE INPUT STYLES ===
    '& .MuiInputBase-root': {
      fontSize: sizeConfig.fontSize,
      borderRadius: sizeConfig.borderRadius,
      minHeight: sizeConfig.height,
      // üé® N·ªÄN: M√†u n·ªÅn t·ª´ theme (t·ª± ƒë·ªông dark/light)
      backgroundColor: theme.palette.background.paper,
      fontFamily: theme.typography.fontFamily,
      transition: theme.transitions.create(
        ['border-color', 'background-color', 'box-shadow'],
        { duration: theme.transitions.duration.short }
      ),
    },

    // === INPUT FIELD STYLES ===
    '& .MuiInputBase-input': {
      padding: sizeConfig.padding,
      ...(wsVariant === 'filled' && {
        padding: filledPadding,
      }),
      // üìù CH·ªÆ: M√†u text ch√≠nh t·ª´ theme
      color: theme.palette.text.primary,

      '&::placeholder': {
        opacity: 0.7,
        // üìù PLACEHOLDER: M√†u text ph·ª•
        color: theme.palette.text.secondary,
      },

      // === AUTOFILL STYLES - THEME AWARE ===
      '&:-webkit-autofill': {
        WebkitBoxShadow: `0 0 0 1000px ${theme.palette.background.paper} inset`,
        WebkitTextFillColor: theme.palette.text.primary,
        transition: 'background-color 5000s ease-in-out 0s',
      },
    },

    // === MULTILINE TEXTAREA ===
    '& .MuiInputBase-inputMultiline': {
      padding: sizeConfig.padding,
      resize: 'vertical',
      minHeight: 'unset',
    },

    // === LABEL STYLES ===
    // CUSTOMIZE: Styling cho input label
    '& .MuiInputLabel-root': {
      fontWeight: theme.typography.fontWeightMedium || 500,
      // üìù LABEL: M√†u text ph·ª• khi kh√¥ng focus
      color: theme.palette.text.secondary,

      // üéØ LABEL FOCUS: M√†u theme color khi focus
      '&.Mui-focused': {
        color: focusColor,
        fontWeight: 600,
      },

      // üö® LABEL ERROR: M√†u ƒë·ªè khi c√≥ l·ªói
      '&.Mui-error': {
        color: theme.palette.error.main,
      },

      // ‚úÖ LABEL SUCCESS: M√†u xanh khi th√†nh c√¥ng
      ...(hasSuccess &&
        !error && {
          '&.Mui-focused': {
            color: theme.palette.success.main,
          },
        }),
    },

    // === OUTLINED VARIANT STYLES ===
    '& .MuiOutlinedInput-notchedOutline': {
      // üî≤ VI·ªÄN: M√†u divider m·∫∑c ƒë·ªãnh
      borderColor: theme.palette.divider,
      transition: theme.transitions.create(['border-color'], {
        duration: theme.transitions.duration.short,
      }),
    },

    // üé® VI·ªÄN HOVER: M√†u nh·∫°t c·ªßa theme color
    '& .MuiInputBase-root:hover .MuiOutlinedInput-notchedOutline': {
      borderColor:
        theme.palette.mode === 'dark'
          ? `${focusColor}80` // 50% opacity cho dark mode
          : `${focusColor}60`, // 37% opacity cho light mode
    },

    // üéØ VI·ªÄN FOCUS: M√†u ƒë·∫≠m + shadow cho focus
    '& .MuiInputBase-root.Mui-focused .MuiOutlinedInput-notchedOutline': {
      borderColor: focusColor,
      borderWidth: '2px',
      // ‚ú® SHADOW FOCUS: Glow effect khi focus
      boxShadow: `0 0 0 1px ${focusColor}25`,
    },

    // === FILLED VARIANT STYLES ===
    ...(wsVariant === 'filled' && {
      '& .MuiFilledInput-root': {
        borderRadius: `${sizeConfig.borderRadius} ${sizeConfig.borderRadius} 0 0`,
        // üé® N·ªÄN FILLED: M√†u n·ªÅn nh·∫°t
        backgroundColor:
          theme.palette.mode === 'dark'
            ? theme.palette.grey[800]
            : theme.palette.grey[100],

        // üé® N·ªÄN HOVER: M√†u theme nh·∫°t khi hover
        '&:hover': {
          backgroundColor:
            theme.palette.mode === 'dark'
              ? `${focusColor}15`
              : `${focusColor}10`,
        },

        // üé® N·ªÄN FOCUS: M√†u theme ƒë·∫≠m h∆°n khi focus
        '&.Mui-focused': {
          backgroundColor:
            theme.palette.mode === 'dark'
              ? `${focusColor}20`
              : `${focusColor}15`,
        },

        // üî≤ UNDERLINE: M√†u underline khi focus
        '&:after': {
          borderBottomColor: focusColor,
          borderBottomWidth: '2px',
        },
      },
    }),

    // === HELPER TEXT STYLES ===
    '& .MuiFormHelperText-root': {
      marginTop: theme.spacing(0.5),
      fontSize: theme.typography.caption.fontSize,
      lineHeight: 1.4,
      color: theme.palette.text.secondary,

      // üö® HELPER ERROR: M√†u ƒë·ªè cho error message
      '&.Mui-error': {
        color: theme.palette.error.main,
      },
    },

    // === DISABLED STATE ===
    '& .MuiInputBase-root.Mui-disabled': {
      // üö´ N·ªÄN DISABLED: M√†u disabled t·ª´ theme
      backgroundColor: theme.palette.action.disabledBackground,
      color: theme.palette.action.disabled,

      '& .MuiOutlinedInput-notchedOutline': {
        // üö´ VI·ªÄN DISABLED: M√†u disabled
        borderColor: theme.palette.action.disabled,
      },

      '& .MuiInputBase-input': {
        // üö´ CH·ªÆ DISABLED: M√†u disabled cho text
        color: theme.palette.action.disabled,
        WebkitTextFillColor: theme.palette.action.disabled,
      },
    },

    // === SUCCESS STATE ===
    ...(hasSuccess &&
      !error && {
        '& .MuiInputBase-root.Mui-focused .MuiOutlinedInput-notchedOutline': {
          // ‚úÖ VI·ªÄN SUCCESS: Xanh cho th√†nh c√¥ng
          borderColor: theme.palette.success.main,
          boxShadow: `0 0 0 1px ${theme.palette.success.main}25`,
        },

        '& .MuiFormHelperText-root': {
          // ‚úÖ HELPER SUCCESS: M√†u xanh cho success message
          color: theme.palette.success.main,
        },
      }),

    // === ACCESSIBILITY ===
    '& .MuiInputBase-root.Mui-focusVisible': {
      // ‚ôø FOCUS OUTLINE: Outline cho keyboard navigation
      outline: `2px solid ${focusColor}`,
      outlineOffset: '2px',
    },

    // === MOBILE OPTIMIZATIONS ===
    [theme.breakpoints.down('sm')]: {
      '& .MuiInputBase-input': {
        // üì± MOBILE: 16px ƒë·ªÉ prevent zoom tr√™n iOS
        fontSize: '16px',
      },
    },

    // === DARK MODE ADJUSTMENTS ===
    ...(theme.palette.mode === 'dark' && {
      '& .MuiInputBase-root': {
        backgroundColor: theme.palette.background.paper,
      },

      '& .MuiOutlinedInput-notchedOutline': {
        // üåô DARK BORDER: Vi·ªÅn s√°ng h∆°n cho dark mode
        borderColor: theme.palette.grey[700],
      },

      '& .MuiInputBase-input:-webkit-autofill': {
        WebkitBoxShadow: `0 0 0 1000px ${theme.palette.background.paper} inset`,
        WebkitTextFillColor: theme.palette.text.primary,
      },
    }),
  };
});

// ==============================================
// ICON WRAPPER COMPONENT
// ==============================================

export const IconWrapper = styled('div', {
  shouldForwardProp: (prop) => !['wsSize', 'position'].includes(prop as string),
})<{
  wsSize: WSInputSize;
  position: 'start' | 'end';
}>(({ theme, wsSize, position }) => {
  const sizeConfig = getSizeConfig(wsSize);

  return {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: sizeConfig.iconSize,
    // CUSTOMIZE: M√†u m·∫∑c ƒë·ªãnh cho icons
    color: theme.palette.text.secondary,

    // üìê SPACING: Kho·∫£ng c√°ch v·ªõi text
    ...(position === 'start' && {
      marginRight: theme.spacing(1),
    }),
    ...(position === 'end' && {
      marginLeft: theme.spacing(1),
    }),

    '& > *': {
      fontSize: 'inherit',
    },

    // üñ±Ô∏è INTERACTIVE: Hover effect cho clickable icons
    '&.interactive': {
      cursor: 'pointer',
      transition: theme.transitions.create(['color'], {
        duration: theme.transitions.duration.shorter,
      }),

      '&:hover': {
        color: theme.palette.primary.main,
      },
    },
  };
});

// ==============================================
// HELPER TEXT WITH CHARACTER COUNT
// ==============================================

export const StyledHelperText = styled(FormHelperText, {
  shouldForwardProp: (prop) => !['showCount'].includes(prop as string),
})<{
  showCount: boolean;
}>(({ theme, showCount }) => ({
  fontSize: theme.typography.caption.fontSize,
  marginTop: theme.spacing(0.5),
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'flex-start',
  color: theme.palette.text.secondary,

  '& .helper-text': {
    flex: 1,
    marginRight: showCount ? theme.spacing(1) : 0,
    lineHeight: 1.4,
  },

  '& .character-count': {
    flexShrink: 0,
    fontWeight: theme.typography.fontWeightMedium || 500,
    fontSize: theme.typography.caption.fontSize,
    color: theme.palette.text.secondary,

    // üö® OVER LIMIT: ƒê·ªè khi v∆∞·ª£t gi·ªõi h·∫°n
    '&.over-limit': {
      color: theme.palette.error.main,
      fontWeight: 600,
    },

    // ‚ö†Ô∏è NEAR LIMIT: Cam khi g·∫ßn gi·ªõi h·∫°n (80%)
    '&.near-limit': {
      color: theme.palette.warning.main,
      fontWeight: theme.typography.fontWeightMedium || 500,
    },
  },

  transition: theme.transitions.create(['color'], {
    duration: theme.transitions.duration.short,
  }),
}));

// ==============================================
// INPUT ADORNMENT STYLED COMPONENT
// ==============================================

export const StyledInputAdornment = styled(InputAdornment, {
  shouldForwardProp: (prop) => !['wsSize'].includes(prop as string),
})<{
  wsSize: WSInputSize;
}>(({ theme, wsSize }) => {
  const sizeConfig = getSizeConfig(wsSize);

  return {
    '& .MuiTypography-root': {
      fontSize: sizeConfig.iconSize,
      color: theme.palette.text.secondary,
    },

    '& .MuiSvgIcon-root': {
      fontSize: sizeConfig.iconSize,
      color: theme.palette.text.secondary,
      transition: theme.transitions.create(['color'], {
        duration: theme.transitions.duration.shorter,
      }),
    },

    // üñ±Ô∏è CLICKABLE: Hover effect cho interactive adornments
    '&.clickable': {
      cursor: 'pointer',

      '&:hover .MuiSvgIcon-root': {
        color: theme.palette.primary.main,
      },
    },
  };
});

// ==============================================
// INPUT CONTAINER
// ==============================================

export const InputContainer = styled('div')(({ theme }) => ({
  position: 'relative',
  width: '100%',

  '&:focus-within': {
    outline: 'none',
  },

  // üö® ERROR CONTAINER: Styling cho error state
  '&.error': {
    '& .validation-icon': {
      color: theme.palette.error.main,
    },
  },

  // ‚úÖ SUCCESS CONTAINER: Styling cho success state
  '&.success': {
    '& .validation-icon': {
      color: theme.palette.success.main,
    },
  },
}));
