#!/bin/bash

# C·∫•u h√¨nh
PROJECT_ROOT="$(pwd)"
SRC_DIR="$PROJECT_ROOT/src"
OUTPUT_FILE="$PROJECT_ROOT/PROJECT_CODE.md"
GITIGNORE_FILE="$PROJECT_ROOT/.gitignore"

# C√°c extension file code c·∫ßn qu√©t (c√≥ th·ªÉ th√™m/b·ªõt theo nhu c·∫ßu)
CODE_EXTENSIONS=("js" "jsx" "ts" "tsx" "vue" "py" "java" "php" "rb" "go" "rs" "cpp" "c" "h" "css" "scss" "sass" "less" "html" "xml" "json" "yaml" "yml" "sh" "sql" "md")

# C√°c file quan tr·ªçng ·ªü th∆∞ m·ª•c g·ªëc c·∫ßn ƒë·ªçc th√™m (lo·∫°i b·ªè nh·ªØng file kh√¥ng c·∫ßn thi·∫øt)
ROOT_FILES=("server.js" "app.js" "index.js" "main.js" "package.json" "tsconfig.json" "webpack.config.js" "vite.config.js" "next.config.js" "nuxt.config.js" "vue.config.js" "angular.json" "composer.json" "requirements.txt" "Dockerfile" "docker-compose.yml" "README.md")

# ƒê·ªçc .gitignore v√† t·∫°o danh s√°ch pattern ƒë·ªÉ b·ªè qua
declare -a GITIGNORE_PATTERNS=()

read_gitignore() {
    if [ -f "$GITIGNORE_FILE" ]; then
        echo "üìã ƒê·ªçc .gitignore ƒë·ªÉ b·ªè qua c√°c file kh√¥ng c·∫ßn thi·∫øt..."

        while IFS= read -r line || [[ -n "$line" ]]; do
            # B·ªè qua d√≤ng tr·ªëng v√† comment
            if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# && ! "$line" =~ ^[[:space:]]*$ ]]; then
                # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu cu·ªëi
                line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                GITIGNORE_PATTERNS+=("$line")
                echo "  üö´ B·ªè qua pattern: $line"
            fi
        done < "$GITIGNORE_FILE"
    else
        echo "‚ÑπÔ∏è  Kh√¥ng t√¨m th·∫•y file .gitignore"
    fi
}

# H√†m ki·ªÉm tra xem file c√≥ b·ªã gitignore kh√¥ng
is_ignored() {
    local file_path="$1"
    local relative_path="${file_path#$PROJECT_ROOT/}"

    # B·ªè qua m·ªôt s·ªë file/folder ph·ªï bi·∫øn lu√¥n
    case "$relative_path" in
        "node_modules/"*|"node_modules") return 0 ;;
        ".git/"*|".git") return 0 ;;
        "dist/"*|"build/"*|"out/"*) return 0 ;;
        ".env"|".env.local"|".env.production"|".env.development") return 0 ;;
        "package-lock.json"|"yarn.lock"|"pnpm-lock.yaml") return 0 ;;
        "*.log"|"*.tmp"|"*.cache") return 0 ;;
        ".DS_Store"|"Thumbs.db") return 0 ;;
    esac

    # Ki·ªÉm tra v·ªõi c√°c pattern trong .gitignore
    for pattern in "${GITIGNORE_PATTERNS[@]}"; do
        # X·ª≠ l√Ω pattern ƒë∆°n gi·∫£n v·ªõi wildcards
        if [[ "$relative_path" == $pattern ]] || [[ "$relative_path" =~ ^${pattern//\*/.*}$ ]] || [[ "$relative_path" == *"$pattern"* ]]; then
            return 0
        fi

        # Ki·ªÉm tra n·∫øu file n·∫±m trong th∆∞ m·ª•c b·ªã ignore
        if [[ "$pattern" == */ ]] && [[ "$relative_path" == ${pattern}* ]]; then
            return 0
        fi
    done

    return 1
}

# H√†m l·∫•y language cho syntax highlighting d·ª±a tr√™n extension
get_language() {
    local file_ext="$1"
    case "$file_ext" in
        "js"|"jsx") echo "javascript" ;;
        "ts"|"tsx") echo "typescript" ;;
        "py") echo "python" ;;
        "java") echo "java" ;;
        "php") echo "php" ;;
        "rb") echo "ruby" ;;
        "go") echo "go" ;;
        "rs") echo "rust" ;;
        "cpp"|"c"|"h") echo "cpp" ;;
        "css") echo "css" ;;
        "scss"|"sass") echo "scss" ;;
        "less") echo "less" ;;
        "html") echo "html" ;;
        "xml") echo "xml" ;;
        "json") echo "json" ;;
        "yaml"|"yml") echo "yaml" ;;
        "sh") echo "bash" ;;
        "sql") echo "sql" ;;
        "md") echo "markdown" ;;
        "vue") echo "vue" ;;
        *) echo "text" ;;
    esac
}

# H√†m ki·ªÉm tra xem file c√≥ ph·∫£i l√† file code kh√¥ng
is_code_file() {
    local file="$1"
    local extension="${file##*.}"

    # Ki·ªÉm tra extension c√≥ trong danh s√°ch kh√¥ng
    for ext in "${CODE_EXTENSIONS[@]}"; do
        if [ "$extension" = "$ext" ]; then
            return 0
        fi
    done
    return 1
}

# H√†m x·ª≠ l√Ω file ·ªü th∆∞ m·ª•c g·ªëc
process_root_files() {
    echo "üìÇ ƒêang x·ª≠ l√Ω c√°c file quan tr·ªçng ·ªü th∆∞ m·ª•c g·ªëc..."

    # Th√™m section header cho root files
    {
        echo "## üìÅ Root Files"
        echo
        echo "> C√°c file c·∫•u h√¨nh v√† entry points quan tr·ªçng c·ªßa d·ª± √°n"
        echo
    } >> "$OUTPUT_FILE"

    local root_file_count=0

    for root_file in "${ROOT_FILES[@]}"; do
        local file_path="$PROJECT_ROOT/$root_file"

        if [ -f "$file_path" ] && ! is_ignored "$file_path"; then
            echo "üìÑ ƒêang x·ª≠ l√Ω root file: $root_file"

            # L·∫•y extension ƒë·ªÉ x√°c ƒë·ªãnh ng√¥n ng·ªØ
            local extension="${root_file##*.}"
            local language=$(get_language "$extension")

            # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
            case "$root_file" in
                "package.json"|"composer.json"|"tsconfig.json"|"*.json") language="json" ;;
                "requirements.txt") language="text" ;;
                "Dockerfile") language="dockerfile" ;;
                "docker-compose.yml"|"*.yml"|"*.yaml") language="yaml" ;;
                "README.md") language="markdown" ;;
            esac

            # Th√™m v√†o file markdown
            {
                echo "### $root_file"
                echo
                echo "\`\`\`$language"
                cat "$file_path"
                echo
                echo "\`\`\`"
                echo
            } >> "$OUTPUT_FILE"

            ((root_file_count++))
        elif [ -f "$file_path" ]; then
            echo "üö´ B·ªè qua root file (gitignore): $root_file"
        fi
    done

    if [ $root_file_count -eq 0 ]; then
        {
            echo "*Kh√¥ng t√¨m th·∫•y file n√†o trong danh s√°ch root files (ho·∫∑c t·∫•t c·∫£ ƒë√£ b·ªã gitignore).*"
            echo
        } >> "$OUTPUT_FILE"
    fi

    return $root_file_count
}

# T·∫°o header cho file markdown
create_header() {
    cat > "$OUTPUT_FILE" << EOF
# Project Code Documentation

> üìÑ File n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ script \`generate_project_code.sh\`
>
> üïê Th·ªùi gian t·∫°o: $(date '+%Y-%m-%d %H:%M:%S')
>
> üö´ T·ª± ƒë·ªông b·ªè qua c√°c file trong .gitignore v√† c√°c file kh√¥ng c·∫ßn thi·∫øt

---

EOF
}

echo "üöÄ B·∫Øt ƒë·∫ßu qu√©t code trong d·ª± √°n: $PROJECT_ROOT"
echo "üìù T·∫°o file: $OUTPUT_FILE"

# ƒê·ªçc .gitignore tr∆∞·ªõc
read_gitignore

# T·∫°o header
create_header

# X·ª≠ l√Ω c√°c file ·ªü th∆∞ m·ª•c g·ªëc tr∆∞·ªõc
process_root_files
root_files_processed=$?

# Ki·ªÉm tra th∆∞ m·ª•c src c√≥ t·ªìn t·∫°i kh√¥ng
if [ ! -d "$SRC_DIR" ]; then
    echo "‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c src, ch·ªâ x·ª≠ l√Ω root files"
    src_exists=false
else
    src_exists=true
    # Th√™m section header cho src files
    {
        echo "## üìÅ Source Code (src/)"
        echo
        echo "> Code ch√≠nh c·ªßa d·ª± √°n trong th∆∞ m·ª•c src"
        echo
    } >> "$OUTPUT_FILE"
fi

# ƒê·∫øm s·ªë file ƒë√£ x·ª≠ l√Ω
file_count=0
ignored_count=0

# Ch·ªâ qu√©t src n·∫øu th∆∞ m·ª•c t·ªìn t·∫°i
if [ "$src_exists" = true ]; then
    echo "üìÇ ƒêang qu√©t code trong th∆∞ m·ª•c: $SRC_DIR"

    # Qu√©t t·∫•t c·∫£ file trong th∆∞ m·ª•c src (bao g·ªìm th∆∞ m·ª•c con)
    while IFS= read -r -d '' file; do
        # Ki·ªÉm tra xem file c√≥ b·ªã gitignore kh√¥ng
        if is_ignored "$file"; then
            ((ignored_count++))
            continue
        fi

        # Ki·ªÉm tra xem c√≥ ph·∫£i file code kh√¥ng
        if is_code_file "$file"; then
            # L·∫•y ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ project root
            relative_path="${file#$PROJECT_ROOT/}"

            # L·∫•y extension ƒë·ªÉ x√°c ƒë·ªãnh ng√¥n ng·ªØ
            extension="${file##*.}"
            language=$(get_language "$extension")

            echo "üìÑ ƒêang x·ª≠ l√Ω: $relative_path"

            # Th√™m v√†o file markdown
            {
                echo "### $relative_path"
                echo
                echo "\`\`\`$language"
                cat "$file"
                echo
                echo "\`\`\`"
                echo
            } >> "$OUTPUT_FILE"

            ((file_count++))
        fi
    done < <(find "$SRC_DIR" -type f -print0 | sort -z)
fi

# Th√™m footer
{
    echo "---"
    echo
    echo "üìä **T·ªïng k·∫øt:**"
    echo "- üìÅ Root files: $root_files_processed file"
    echo "- üìÇ Source files: $file_count file"
    echo "- üö´ Files b·ªè qua: $ignored_count file"
    echo "- üî¢ **T·ªïng c·ªông x·ª≠ l√Ω: $((root_files_processed + file_count)) file**"
    echo
    echo "üîÑ ƒê·ªÉ c·∫≠p nh·∫≠t file n√†y, ch·∫°y l·∫°i: \`./generate_project_code.sh\`"
} >> "$OUTPUT_FILE"

total_files=$((root_files_processed + file_count))
echo "‚úÖ Ho√†n th√†nh! ƒê√£ t·∫°o $OUTPUT_FILE v·ªõi $total_files file ($root_files_processed root + $file_count src)"
echo "üö´ ƒê√£ b·ªè qua $ignored_count file theo .gitignore v√† rules"
echo "üìñ M·ªü file ƒë·ªÉ xem: code $OUTPUT_FILE"